import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App() {
    }

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        StringBuilder sb = new StringBuilder("============= Order details =============\n");
        StringBuilder Promotion_used1 = new StringBuilder("满30减6 yuan，saving 6 yuan\n");
        StringBuilder Promotion_used2 = new StringBuilder("Half price for certain dishes (");
        //总价
        double total = 0;
        //最终价   、 优惠1价格  、 优惠2价格
        double final_price = 0, total_price1 = 0, total_price2 = 0;
        //判断是否有特色菜
        Boolean flag = false;
        //ITEM0001 x 1", "ITEM0013 x 2", "ITEM0022 x 1
        Map<String, Integer> map = new HashMap<>();
        //遍历inputs解析传入数据
        for (int i = 0; i < inputs.size(); i++) {
            String str = inputs.get(i);
            int index = str.indexOf('x');

            //获取菜的id
            String key = str.substring(0, index - 1);
            //获取数量
            Integer value = Integer.valueOf(str.substring(index + 2));
            map.put(key, value);
        }
        List<Item> items = itemRepository.findAll();
        List<SalesPromotion> salesPromotion = salesPromotionRepository.findAll();
        //获取特定菜品集合
        List<String> relatedItems = salesPromotion.get(1).getRelatedItems();
        Map<String, String> relatedItemsMap = new HashMap<>();
        for (int i = 0; i < relatedItems.size(); i++) {
            relatedItemsMap.put(relatedItems.get(i), "null");
        }
        for (int i = 0; i < items.size(); i++) {
            Item item = items.get(i);
            //数量
            Integer count = map.get(item.getId());
            //如果获取到的数据不为空则计算价格
            if (count != null) {
                String itemName = item.getName();
                double itemPrice = item.getPrice();
                //"Braised chicken x 1 = 18 yuan\n"
                sb.append(itemName + " x " + count + " = " + String.format("%.0f", itemPrice * count) + " yuan\n");

                //计算总价

                total += itemPrice * count;
                //判断是否为特定菜品
                if (relatedItemsMap.get(item.getId()) != null){
                    total_price2 += (itemPrice / 2) * count;
                    Promotion_used2.append(itemName + "，");
                    flag = true;
                }else{
                    total_price2 += itemPrice * count;
                }
            }
        }
        //去掉最后一个 “and”
        if(Promotion_used2.lastIndexOf("，") != -1) {
            Promotion_used2.delete(Promotion_used2.lastIndexOf("，"), Promotion_used2.lastIndexOf("，") + 1);
        }
        //判断使用何种优惠方式
        //满30减6
        if (total >= 30) {
            total_price1 = total - 6;
        }

        if(total >= 30 || flag){
            sb.append("-----------------------------------\n");
            sb.append("Promotion used:\n");
            System.out.println(total + " " + total_price2);
            if (total_price1 <= total_price2) {
                //如果优惠1更省钱
                sb.append(Promotion_used1);
                final_price = total_price1;
            } else if (total_price1 > total_price2) {
                ////如果优惠2更省钱
                sb.append(Promotion_used2 + ")，" + "saving " + String.format("%.0f", total - total_price2) + " yuan\n");
                final_price = total_price2;
            }
        }else{
            final_price = total;
        }

        sb.append("-----------------------------------\n");
        sb.append("Total："+String.format("%.0f", final_price)+" yuan\n");
        sb.append("===================================");
        return sb.toString();
    }
}
